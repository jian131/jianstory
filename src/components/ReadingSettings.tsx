'use client'

import { useState, useEffect } from 'react'
import {
  SunIcon,
  MoonIcon,
  AdjustmentsHorizontalIcon,
  SwatchIcon,
  DocumentTextIcon
} from '@heroicons/react/24/outline'
import { type ReadingSettings } from '@/types/reading'

interface ReadingSettingsProps {
  isOpen: boolean
  onClose: () => void
  settings: ReadingSettings
  onSettingsChange: (settings: ReadingSettings) => void
}

const FONT_FAMILIES = [
  {
    name: 'Times New Roman',
    value: 'Times New Roman, serif',
    vietnamese: true,
    description: 'Font serif c·ªï ƒëi·ªÉn, d·ªÖ ƒë·ªçc cho vƒÉn h·ªçc'
  },
  {
    name: 'Arial',
    value: 'Arial, sans-serif',
    vietnamese: true,
    description: 'Font sans-serif r√µ r√†ng, d·ªÖ ƒë·ªçc'
  },
  {
    name: 'Georgia',
    value: 'Georgia, serif',
    vietnamese: true,
    description: 'Font serif ƒë·∫πp, t·ªëi ∆∞u cho m√†n h√¨nh'
  },
  {
    name: 'Verdana',
    value: 'Verdana, sans-serif',
    vietnamese: true,
    description: 'Font d·ªÖ ƒë·ªçc ·ªü m·ªçi k√≠ch th∆∞·ªõc'
  },
  {
    name: 'Roboto',
    value: 'Roboto, sans-serif',
    vietnamese: true,
    description: 'Font Google hi·ªán ƒë·∫°i, clean'
  },
  {
    name: 'Open Sans',
    value: 'Open Sans, sans-serif',
    vietnamese: true,
    description: 'Font ƒë·∫πp, d·ªÖ ƒë·ªçc cho vƒÉn b·∫£n d√†i'
  },
  {
    name: 'Noto Sans Vietnamese',
    value: 'Noto Sans, sans-serif',
    vietnamese: true,
    description: 'Font Google t·ªëi ∆∞u cho ti·∫øng Vi·ªát'
  },
  {
    name: 'Inter',
    value: 'Inter, sans-serif',
    vietnamese: true,
    description: 'Font hi·ªán ƒë·∫°i cho giao di·ªán web'
  },
  {
    name: 'Source Sans Pro',
    value: 'Source Sans Pro, sans-serif',
    vietnamese: true,
    description: 'Font Adobe chuy√™n nghi·ªáp'
  },
  {
    name: 'Lora',
    value: 'Lora, serif',
    vietnamese: true,
    description: 'Font serif ƒë·∫πp cho vƒÉn b·∫£n d√†i'
  },
  {
    name: 'Playfair Display',
    value: 'Playfair Display, serif',
    vietnamese: true,
    description: 'Font serif sang tr·ªçng, c·ªï ƒëi·ªÉn'
  },
  {
    name: 'Merriweather',
    value: 'Merriweather, serif',
    vietnamese: true,
    description: 'Font serif tho·∫£i m√°i cho ƒë·ªçc l√¢u'
  },
  {
    name: 'Source Serif Pro',
    value: 'Source Serif Pro, serif',
    vietnamese: true,
    description: 'Font serif Adobe cho vƒÉn b·∫£n'
  },
  {
    name: 'Crimson Text',
    value: 'Crimson Text, serif',
    vietnamese: true,
    description: 'Font serif c·ªï ƒëi·ªÉn cho s√°ch'
  },
  {
    name: 'Libre Baskerville',
    value: 'Libre Baskerville, serif',
    vietnamese: true,
    description: 'Font serif ki·ªÉu c≈©, thanh l·ªãch'
  },
  {
    name: 'Nunito',
    value: 'Nunito, sans-serif',
    vietnamese: true,
    description: 'Font sans-serif tr√≤n, th√¢n thi·ªán'
  },
  {
    name: 'Poppins',
    value: 'Poppins, sans-serif',
    vietnamese: true,
    description: 'Font hi·ªán ƒë·∫°i, nƒÉng ƒë·ªông'
  },
  {
    name: 'Raleway',
    value: 'Raleway, sans-serif',
    vietnamese: true,
    description: 'Font thanh m·∫£nh, tinh t·∫ø'
  }
]

const BACKGROUND_THEMES = [
  {
    name: 'S√°ng',
    key: 'light',
    background: '#ffffff',
    textColor: '#1f2937',
    description: 'N·ªÅn tr·∫Øng, ch·ªØ ƒëen c·ªï ƒëi·ªÉn'
  },
  {
    name: 'T·ªëi',
    key: 'dark',
    background: '#1f2937',
    textColor: '#f9fafb',
    description: 'N·ªÅn ƒëen, ch·ªØ tr·∫Øng'
  },
  {
    name: 'N√¢u c·ªï ƒëi·ªÉn',
    key: 'sepia',
    background: '#f7f3e9',
    textColor: '#8b4513',
    description: 'M√†u gi·∫•y c≈©, ·∫•m √°p'
  },
  {
    name: 'ƒê√™m xanh',
    key: 'night',
    background: '#0f172a',
    textColor: '#e2e8f0',
    description: 'B·∫£o v·ªá m·∫Øt ban ƒë√™m'
  },
  {
    name: 'Xanh mint',
    key: 'mint',
    background: '#f0fdf4',
    textColor: '#166534',
    description: 'Xanh l√° nh·∫π nh√†ng'
  },
  {
    name: 'T√≠m lavender',
    key: 'lavender',
    background: '#faf5ff',
    textColor: '#581c87',
    description: 'T√≠m pastel d·ªãu m·∫Øt'
  },
  {
    name: 'Cam ·∫•m',
    key: 'warm',
    background: '#fff7ed',
    textColor: '#c2410c',
    description: 'M√†u cam ·∫•m √°p'
  },
  {
    name: 'X√°m thanh l·ªãch',
    key: 'elegant',
    background: '#f8fafc',
    textColor: '#334155',
    description: 'X√°m hi·ªán ƒë·∫°i'
  },
  {
    name: 'ƒêen carbon',
    key: 'carbon',
    background: '#18181b',
    textColor: '#a1a1aa',
    description: 'ƒêen m·ªãn, ch·ªØ x√°m'
  },
  {
    name: 'Xanh d∆∞∆°ng',
    key: 'blue',
    background: '#eff6ff',
    textColor: '#1e40af',
    description: 'Xanh d∆∞∆°ng nh·∫π'
  },
  {
    name: 'H·ªìng pastel',
    key: 'pink',
    background: '#fdf2f8',
    textColor: '#be185d',
    description: 'H·ªìng nh·∫π nh√†ng'
  },
  {
    name: 'V√†ng kem',
    key: 'cream',
    background: '#fffbeb',
    textColor: '#92400e',
    description: 'V√†ng kem m·ªÅm m·∫°i'
  },
  {
    name: 'Xanh ng·ªçc',
    key: 'emerald',
    background: '#ecfdf5',
    textColor: '#047857',
    description: 'Xanh ng·ªçc t∆∞∆°i m√°t'
  },
  {
    name: 'T√≠m than',
    key: 'slate',
    background: '#f1f5f9',
    textColor: '#475569',
    description: 'X√°m t√≠m nh·∫π'
  },
  {
    name: 'ƒê·ªè burgundy',
    key: 'burgundy',
    background: '#fef2f2',
    textColor: '#991b1b',
    description: 'ƒê·ªè ƒë·∫≠m c·ªï ƒëi·ªÉn'
  },
  {
    name: 'N√¢u chocolate',
    key: 'chocolate',
    background: '#fdf6e3',
    textColor: '#8b4513',
    description: 'N√¢u chocolate ·∫•m'
  },
  {
    name: 'Xanh navy',
    key: 'navy',
    background: '#f8fafc',
    textColor: '#1e3a8a',
    description: 'Xanh navy trang tr·ªçng'
  },
  {
    name: 'T·ªëi OLED',
    key: 'oled',
    background: '#000000',
    textColor: '#ffffff',
    description: 'ƒêen thu·∫ßn cho m√†n h√¨nh OLED'
  }
]

export default function ReadingSettings({ isOpen, onClose, settings, onSettingsChange }: ReadingSettingsProps) {
  const [activeTab, setActiveTab] = useState<'font' | 'background'>('font')

  useEffect(() => {
    // Load Google Fonts for Vietnamese
    if (typeof window !== 'undefined') {
      const link = document.createElement('link')
      link.href = 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&family=Lora:wght@400;500;600&family=Noto+Sans:wght@300;400;500;600&family=Open+Sans:wght@300;400;500;600&family=Roboto:wght@300;400;500&family=Source+Sans+Pro:wght@300;400;500;600&family=Playfair+Display:wght@400;500;600&family=Merriweather:wght@300;400;700&family=Source+Serif+Pro:wght@400;600&family=Crimson+Text:wght@400;600&family=Libre+Baskerville:wght@400;700&family=Nunito:wght@300;400;600&family=Poppins:wght@300;400;500;600&family=Raleway:wght@300;400;500;600&display=swap'
      link.rel = 'stylesheet'
      document.head.appendChild(link)
    }
  }, [])

  const handleSettingChange = (key: keyof ReadingSettings, value: any) => {
    const currentTheme = BACKGROUND_THEMES.find(theme => theme.key === settings.theme)

    let newSettings: ReadingSettings = {
      ...settings,
      [key]: value
    }

    // If changing background theme, update related colors
    if (key === 'theme') {
      const theme = BACKGROUND_THEMES.find(t => t.key === value)
      if (theme) {
        newSettings = {
          ...newSettings,
          background: theme.background,
          textColor: theme.textColor,
          theme: value
        }
      }
    }

    onSettingsChange(newSettings)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">‚öôÔ∏è C√†i ƒë·∫∑t ƒë·ªçc truy·ªán</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <span className="text-2xl">&times;</span>
          </button>
        </div>

        {/* Tabs */}
        <div className="flex border-b">
          <button
            onClick={() => setActiveTab('font')}
            className={`flex-1 px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'font'
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <DocumentTextIcon className="w-4 h-4 inline mr-2" />
            üìù Font & K√≠ch th∆∞·ªõc
          </button>
          <button
            onClick={() => setActiveTab('background')}
            className={`flex-1 px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'background'
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <SwatchIcon className="w-4 h-4 inline mr-2" />
            üé® N·ªÅn & M√†u s·∫Øc
          </button>
        </div>

        {/* Content */}
        <div className="p-6 max-h-[60vh] overflow-y-auto">
          {activeTab === 'font' && (
            <div className="space-y-6">
              {/* Font Size */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  üìè C·ª° ch·ªØ: {settings.fontSize}px
                </label>
                <input
                  type="range"
                  min="12"
                  max="24"
                  value={settings.fontSize}
                  onChange={(e) => handleSettingChange('fontSize', parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                  title={`C·ª° ch·ªØ: ${settings.fontSize}px`}
                  aria-label="ƒêi·ªÅu ch·ªânh c·ª° ch·ªØ"
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>12px (Nh·ªè)</span>
                  <span>18px (V·ª´a)</span>
                  <span>24px (L·ªõn)</span>
                </div>
              </div>

              {/* Line Height */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  üìê Kho·∫£ng c√°ch d√≤ng: {settings.lineHeight}
                </label>
                <input
                  type="range"
                  min="1.2"
                  max="2.0"
                  step="0.1"
                  value={settings.lineHeight}
                  onChange={(e) => handleSettingChange('lineHeight', parseFloat(e.target.value))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                  title={`Kho·∫£ng c√°ch d√≤ng: ${settings.lineHeight}`}
                  aria-label="ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch d√≤ng"
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>S√≠t (1.2)</span>
                  <span>V·ª´a (1.6)</span>
                  <span>R·ªông (2.0)</span>
                </div>
              </div>

              {/* Font Family */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  üî§ Font ch·ªØ ({FONT_FAMILIES.length} fonts t·ªëi ∆∞u ti·∫øng Vi·ªát)
                </label>
                <div className="grid grid-cols-1 gap-3 max-h-64 overflow-y-auto">
                  {FONT_FAMILIES.map((font) => (
                    <button
                      key={font.value}
                      onClick={() => handleSettingChange('fontFamily', font.value)}
                      className={`p-3 text-left border rounded-lg transition-all ${
                        settings.fontFamily === font.value
                          ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                          : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                      style={{ fontFamily: font.value }}
                    >
                      <div className="font-medium text-sm">{font.name}</div>
                      <div className="text-xs text-gray-500 mb-1">{font.description}</div>
                      <div className="text-sm" style={{ fontFamily: font.value }}>
                        M·∫´u: ƒê√¢y l√† ƒëo·∫°n vƒÉn ti·∫øng Vi·ªát v·ªõi d·∫•u √¢m v√† d·∫•u thanh: √†√°·∫£√£·∫° √™·∫ø·ªÉ·ªÖ·ªá
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'background' && (
            <div className="space-y-6">
              {/* Background Themes */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  üé® Ch·ªß ƒë·ªÅ n·ªÅn ({BACKGROUND_THEMES.length} themes ƒëa d·∫°ng)
                </label>
                <div className="grid grid-cols-2 lg:grid-cols-3 gap-3 max-h-80 overflow-y-auto">
                  {BACKGROUND_THEMES.map((theme) => (
                    <button
                      key={theme.key}
                      onClick={() => handleSettingChange('theme', theme.key)}
                      className={`p-3 text-left border rounded-lg transition-all ${
                        settings.theme === theme.key
                          ? 'border-blue-500 ring-2 ring-blue-200'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center space-x-2 mb-2">
                        <div
                          className="w-5 h-5 rounded border-2"
                          style={{
                            backgroundColor: theme.background,
                            borderColor: theme.textColor
                          }}
                        />
                        <span className="font-medium text-xs">{theme.name}</span>
                      </div>
                      <div className="text-xs text-gray-500 mb-2">{theme.description}</div>
                      <div
                        className="text-xs p-2 rounded text-center"
                        style={{
                          backgroundColor: theme.background,
                          color: theme.textColor
                        }}
                      >
                        Sample text
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Preview */}
        <div className="border-t p-6">
          <div className="mb-3">
            <span className="text-sm font-medium text-gray-700">üëÄ Xem tr∆∞·ªõc:</span>
          </div>
          <div
            className="p-4 rounded-lg border"
            style={{
              backgroundColor: settings.background,
              color: settings.textColor,
              fontFamily: settings.fontFamily,
              fontSize: `${settings.fontSize}px`,
              lineHeight: settings.lineHeight
            }}
          >
            <h3 className="font-semibold mb-2">Ch∆∞∆°ng 1: Kh·ªüi ƒë·∫ßu h√†nh tr√¨nh</h3>
            <p>
              ƒê√¢y l√† ƒëo·∫°n vƒÉn m·∫´u ƒë·ªÉ b·∫°n xem tr∆∞·ªõc c√†i ƒë·∫∑t ƒë·ªçc truy·ªán.
              VƒÉn b·∫£n n√†y bao g·ªìm c√°c k√Ω t·ª± ti·∫øng Vi·ªát v·ªõi ƒë·∫ßy ƒë·ªß d·∫•u thanh nh∆∞:
              √†, ·∫£, √£, √°, ·∫°, ƒÉ, ·∫±, ·∫≥, ·∫µ, ·∫Ø, ·∫∑, √¢, ·∫ß, ·∫©, ·∫´, ·∫•, ·∫≠, ƒë.
            </p>
            <p className="mt-2">
              Font ch·ªØ v√† m√†u n·ªÅn s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn tr·∫£i nghi·ªám ƒë·ªçc c·ªßa b·∫°n.
              H√£y ch·ªçn c√†i ƒë·∫∑t ph√π h·ª£p nh·∫•t ƒë·ªÉ ƒë·ªçc tho·∫£i m√°i trong th·ªùi gian d√†i.
              Ch√∫c b·∫°n c√≥ nh·ªØng gi√¢y ph√∫t ƒë·ªçc truy·ªán th√∫ v·ªã! üìö‚ú®
            </p>
          </div>
        </div>

        {/* Footer */}
        <div className="flex justify-end gap-3 p-6 border-t bg-gray-50">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          >
            ‚ùå ƒê√≥ng
          </button>
          <button
            onClick={onClose}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            ‚úÖ √Åp d·ª•ng
          </button>
        </div>
      </div>
    </div>
  )
}
